upstream vendor_app_server {

      # fail_timeout=0 means we always retry an upstream even if it failed
      # to return a good HTTP response (in case the Unicorn master nukes a
                # single worker for timing out).

      server unix:/home/ubuntu/gunicorn_conf/run/gunicorn.sock fail_timeout=0;
}

server {

    listen   80;

    client_max_body_size 4G;

    access_log /home/ubuntu/gunicorn_conf/logs/nginx-vendor-access.log;
    error_log /home/ubuntu/gunicorn_conf/logs/nginx-vendor-error.log;

    location /static/ {
        alias   /home/ubuntu/www/;
    }
    location /vendor-app/ {

	alias   /home/ubuntu/www/vendor-app/;
        expires -1;
        add_header Pragma "no-cache";
        add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
 		try_files $uri$args $uri$args/ $uri /vendor-app/index.html ;
	# try_files $uri$args $uri$args/ $uri /vendor-app/index.html =404;
    }

    location /customer-app/ {
        alias   /home/ubuntu/www/customer-app/;
        expires -1;
        add_header Pragma "no-cache";
        add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
        try_files $uri$args $uri$args/ $uri /customer-app/index.html ;
    }

    location /test-app/ {
        alias   /home/ubuntu/www/test-app/;
        expires -1;
        add_header Pragma "no-cache";
        add_header Cache-Control "no-store, no-cache, must-revalidate, post-check=0, pre-check=0";
        try_files $uri$args $uri$args/ $uri /test-app/index.html ;
    }

	location /test/ {
		rewrite /test/(.*) /$1 break;
		include proxy_params;
    	proxy_pass http://unix:/home/ubuntu/gunicorn_conf/run/gunicorn_test.sock;
	}

    location /media/ {
        alias   /home/mutsuki/word_rec/image;
    }

    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
          #if (!-f $request_filename) {
          #    proxy_pass http://hello_app_server;
          #    break;
          #}
	include proxy_params;
	proxy_pass http://unix:/home/ubuntu/gunicorn_conf/run/gunicorn.sock;

        # Error pages
	# error_page 404 /home/ubuntu/IIM_108_Project/web_app/dist/vendor-app/index.html
        error_page 500 502 503 504 /500.html;
        location = /500.html {
            root /webapps/hello_django/static/;
	}
    }

}
